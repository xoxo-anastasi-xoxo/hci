{"version":3,"sources":["blocks/Header.js","blocks/KeyboardButton.js","blocks/Keyboard.js","blocks/Trigger.js","blocks/Done.js","blocks/Forget.js","pages/Train.js","pages/Exp1.js","actions/actions.js","pages/Exp2.js","pages/Auth.js","reducers/index.js","reducers/exp.reducer.js","index.js","App.js"],"names":["Header","useState","window","location","pathname","setLocation","onClick","useCallback","name","className","style","color","display","to","KeyboardButton","memo","letter","onKeyPress","isClickable","timer","useRef","onMouseEnter","current","setTimeout","onMouseLeave","clearTimeout","length","MyKeyboard","state","input","last","correctionsNumber","startTime","undefined","time","onChange","button","newState","Date","now","props","inputRef","setState","slice","onClear","this","clearRef","margin","value","placeholder","keyboardMode","withBackspace","map","row","index","key","split","i","Component","Trigger","setKeyboardMode","checked","setChecked","uncheckedIcon","checkedIcon","offColor","Done","Forget","Train","COLORS","CURRENT_COLOR","Exp1","expMode","setExpMode","divColor","setDivColor","dispatch","useDispatch","onClickDone","type","payload","currentGroup","onClickForget","backgroundColor","interv","setInterval","clearInterval","Exp2","Auth","useSelector","onSave","text","file","File","JSON","stringify","userName","toLowerCase","replace","FileSaver","saveAs","ref","rootReducer","combineReducers","exp1","action","console","log","push","exp2","store","createStore","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.3b179278.chunk.js","sourcesContent":["import React, {useCallback, useState} from \"react\";\nimport {Link} from 'react-router-dom';\n\nexport const Header = () => {\n    const [location, setLocation] = useState(window.location.pathname);\n    const onClick = useCallback((name) => {\n        setLocation(name);\n    });\n\n    return <div\n        className='header'\n        style={{\n            color: '#757575',\n            display: 'flex'\n        }}>\n        <Link to='/hci' onClick={() => onClick('/hci')}  className='header__title' style={{color: location === '/hci' ? 'black' : '#757575'}}>HCI</Link>\n        <Link to='/hci/train' onClick={() => onClick('/hci/train')} className='header__menu-element'\n              style={{color: location === '/hci/train' ? 'black' : '#757575'}}>Тренировка</Link>\n        <Link to='/hci/exp1' onClick={() => onClick('/hci/exp1')} className='header__menu-element'\n              style={{color: location === '/hci/exp1' ? 'black' : '#757575'}}>Эксперимент\n            1</Link>\n        <Link to='/hci/exp2' onClick={() => onClick('/hci/exp2')} className='header__menu-element'\n              style={{color: location === '/hci/exp2' ? 'black' : '#757575'}}>Эксперимент\n            2</Link>\n    </div>\n};","import React, {useRef, memo} from \"react\";\n\nexport const KeyboardButton = memo(({\n                                        letter,\n                                        onKeyPress,\n                                        isClickable = true\n                                    }) => {\n    const timer = useRef(0);\n    const className = letter === '' ? 'keyboard-button hg-button hg-standardBtn hg-red hg-red2' : 'keyboard-button hg-button hg-standardBtn';\n    return (\n        <div\n            className={className}\n            onMouseEnter={() => {\n                if (!isClickable) {\n                    timer.current = setTimeout(() => {\n                        onKeyPress(letter);\n                    }, 600);\n                }\n            }}\n            onMouseLeave={() => {\n                if (!isClickable && timer && timer.current) {\n                    clearTimeout(timer.current);\n                    timer.current = 0;\n                }\n            }}\n            onClick={() => {\n                if (isClickable) {\n                    onKeyPress(letter);\n                }\n            }}\n        >\n            {letter.length === 6 ? 'backspace' : letter.length === 7 ? '' : letter}\n        </div>\n    );\n});","import React, {Component} from \"react\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {KeyboardButton} from './KeyboardButton';\n\nexport class MyKeyboard extends Component {\n    state = {\n        input: \"\",\n        last: '',\n        correctionsNumber: 0,\n        startTime: undefined,\n        time: undefined,\n    };\n\n    onChange = (input, button) => {\n        const newState = {\n            input: input,\n            last: button,\n            correctionsNumber: this.state.correctionsNumber + (button === \"{bksp}\" ? 1 : 0),\n            startTime: this.state.startTime || Date.now(),\n            time: Date.now() - (this.state.startTime || Date.now()),\n        };\n        this.props.inputRef.current = newState;\n        this.setState(newState);\n    };\n\n    onKeyPress = button => {\n        if (button === \"\" || (button === \"{bksp}\" && this.state.last === \"{bksp}\")) return;\n        if (button === \"{bksp}\") {\n            this.onChange(this.state.input.slice(0, this.state.input.length - 1), button);\n            return;\n        }\n        if (button === \"{space}\") {\n            this.onChange(this.state.input + ' ', button);\n            return;\n        }\n\n        this.onChange(this.state.input + button, button);\n    };\n\n    onClear = () => {\n        const newState = {\n            input: '',\n            last: '',\n            correctionsNumber: 0,\n            startTime: undefined,\n            time: undefined,\n        };\n        this.setState(newState);\n        this.props.inputRef.current = newState;\n    };\n\n    componentDidMount() {\n        this.props.clearRef.current = this.onClear;\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    style={\n                        {\n                            margin: '40px auto'\n                        }\n                    }\n                    value={this.state.input}\n                    placeholder={this.props.keyboardMode ? \"Кликните по букве\" : 'Задержите курсор на букве'}\n                />\n                <div className='simple-keyboard hg-theme-default hg-layout-default myTheme hg-layout-default'>\n                    {\n                        this.props.withBackspace ? [\n                                \"           {bksp}\",\n                                \"й ц у к е н г ш щ з х ъ\",\n                                \" ф ы в а п р о л д ж э ё \",\n                                \"  я ч с м и т ь б ю  \",\n                                \" {space} \"\n                            ].map((row, index) => (\n                                <div className='hg-row' key={index}>\n                                    {row.split(' ').map((letter, i) => (\n                                        <KeyboardButton\n                                            key={letter + index + i} letter={letter}\n                                            onKeyPress={button => this.onKeyPress(button)}\n                                            isClickable={this.props.keyboardMode}\n                                        />\n                                    ))}\n                                </div>\n                            )\n                            )\n                            : [\n                                \"й ц у к е н г ш щ з х ъ\",\n                                \" ф ы в а п р о л д ж э ё \",\n                                \"  я ч с м и т ь б ю  \",\n                                \" {space} \"\n                            ].map((row, index) => (\n                                <div className='hg-row' key={index}>\n                                    {row.split(' ').map((letter, i) => (\n                                        <KeyboardButton\n                                            key={letter + index + i} letter={letter}\n                                            onKeyPress={button => this.onKeyPress(button)}\n                                            isClickable={this.props.keyboardMode}\n                                        />\n                                    ))}\n                                </div>\n                            )\n                            )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","import React, {useCallback, useState} from \"react\";\nimport Switch from \"react-switch\";\n\nexport const Trigger = ({setKeyboardMode}) => {\n    const [checked, setChecked] = useState(false);\n    const onChange = useCallback(() => {\n        setChecked(!checked);\n        setKeyboardMode(!checked);\n    });\n\n\n    return (\n        <div className='trigger-container'>\n            <Switch onChange={onChange} checked={checked} uncheckedIcon={false} checkedIcon={false} offColor={'#ffc107'}/>\n            <div className='trigger-hint'>\n                {\n                    checked ?\n                        'В данный момент вы находитесь в тачпадном режиме. Для ввода буквы кликнете на нее!'\n                        : 'В данный момент вы находитесь в режиме leap motion. Для ввода буквы задержите на ней курсор!'\n                }\n            </div>\n        </div>\n    );\n};","import React from \"react\";\n\nexport const Done = ({onClick}) => {\n    return (\n        <div className='trigger-container'>\n            <div className='done' onClick={onClick}>Предложение введено</div>\n        </div>\n    );\n};","import React from \"react\";\n\nexport const Forget = ({onClick}) => {\n    return (\n        <div className='trigger-container'>\n            <div className='forget' onClick={onClick}>Забыл:(</div>\n        </div>\n    );\n};","import React, {useRef, useState} from \"react\";\nimport {MyKeyboard} from \"../blocks/Keyboard\";\nimport {Trigger} from \"../blocks/Trigger\";\nimport {useDispatch} from \"react-redux\";\nimport {ADD_EXP2_INFO} from \"../actions/actions\";\nimport {Done} from \"../blocks/Done\";\nimport {Forget} from \"../blocks/Forget\";\n\nexport const Train = () => {\n    const [keyboardMode, setKeyboardMode] = useState(false);\n    const inputRef = useRef({});\n    const clearRef = useRef(() => {});\n\n    const onClickDone = () => {\n        clearRef.current();\n    };\n\n    return <>\n        <MyKeyboard withBackspace={true} keyboardMode={keyboardMode} inputRef={inputRef} clearRef={clearRef}/>\n        <Done onClick={onClickDone}/>\n        <Trigger setKeyboardMode={setKeyboardMode}/>\n    </>;\n};","import React, {useRef, useState} from \"react\";\nimport {MyKeyboard} from \"../blocks/Keyboard\";\nimport {useDispatch} from \"react-redux\";\nimport {ADD_EXP1_INFO} from \"../actions/actions\";\nimport {Done} from \"../blocks/Done\";\nimport {Forget} from \"../blocks/Forget\";\nimport {Trigger} from \"../blocks/Trigger\";\n\nconst COLORS = ['red', '#BFFF00', 'black', 'blue', 'green', 'grey', 'pink', 'yellow', 'white', '#9966CC', 'orange', 'azure', 'violet', 'brown', 'blue', 'pink', 'black', 'yellow',];\nlet CURRENT_COLOR = 0;\n\nexport const Exp1 = () => {\n    const [expMode, setExpMode] = useState(0);\n    const [divColor, setDivColor] = useState(COLORS[CURRENT_COLOR]);\n    const [keyboardMode, setKeyboardMode] = useState(false);\n    const dispatch = useDispatch();\n    const inputRef = useRef({});\n    const clearRef = useRef(() => {\n    });\n\n    const onClickDone = () => {\n        dispatch({\n            type: ADD_EXP1_INFO,\n            payload: {\n                ...inputRef.current,\n                currentGroup: keyboardMode ? 'touch pad' : 'leap motion'\n            }\n        });\n\n        clearRef.current();\n\n        setExpMode(0);\n    };\n    const onClickForget = () => {\n        clearRef.current();\n        setExpMode(0);\n    };\n\n    return (\n        <>\n            {\n                (function () {\n                    switch (expMode) {\n                        case 0: {\n                            return <>\n                                <div\n                                    className='triangle'\n                                    style={{\n                                        backgroundColor: divColor\n                                    }\n                                    }/>\n                                <div\n                                    className='start-button'\n                                    onClick={() => {\n                                        CURRENT_COLOR = (CURRENT_COLOR + 1) % COLORS.length;\n                                        setDivColor(COLORS[CURRENT_COLOR]);\n\n                                        const interv = setInterval(() => {\n                                            CURRENT_COLOR = (CURRENT_COLOR + 1) % COLORS.length;\n                                            setDivColor(COLORS[CURRENT_COLOR]);\n                                        }, 1200);\n                                        setTimeout(() => {\n                                            clearInterval(interv);\n                                            setExpMode(1);\n                                        }, 8000)\n                                    }}\n                                >Начать!\n                                </div>\n                            </>\n\n                        }\n                        case 1: {\n                            return <>\n                                <MyKeyboard keyboardMode={keyboardMode} inputRef={inputRef} clearRef={clearRef}/>\n                                <Done onClick={onClickDone}/>\n                                <Forget onClick={onClickForget}/>\n                            </>;\n                        }\n                    }\n                })()\n            }\n            <Trigger setKeyboardMode={setKeyboardMode}/>\n        </>\n    );\n};","export const ADD_EXP1_INFO = 'ADD_EXP1_INFO';\nexport const ADD_EXP2_INFO = 'ADD_EXP2_INFO';\nexport const CLEAR_ALL = 'CLEAR_ALL';","import React, {useRef, useState} from \"react\";\nimport {MyKeyboard} from \"../blocks/Keyboard\";\nimport {Trigger} from \"../blocks/Trigger\";\nimport {Done} from \"../blocks/Done\";\nimport {Forget} from \"../blocks/Forget\";\nimport {useDispatch} from \"react-redux\";\nimport {ADD_EXP2_INFO} from \"../actions/actions\";\n\nexport const Exp2 = () => {\n    const [keyboardMode, setKeyboardMode] = useState(false);\n    const dispatch = useDispatch();\n    const inputRef = useRef({});\n    const clearRef = useRef(() => {});\n\n    const onClickDone = () => {\n        dispatch({\n            type: ADD_EXP2_INFO,\n            payload: {\n                ...inputRef.current,\n                currentGroup: keyboardMode ? 'touch pad' : 'leap motion'\n            }\n        });\n\n        clearRef.current();\n    };\n    const onClickForget = () => {\n        clearRef.current();\n    };\n\n    return <>\n        <MyKeyboard withBackspace={true} keyboardMode={keyboardMode} inputRef={inputRef} clearRef={clearRef}/>\n        <Done onClick={onClickDone}/>\n        <Forget onClick={onClickForget}/>\n        <Trigger setKeyboardMode={setKeyboardMode}/>\n    </>;\n};","import React, {useCallback, useRef} from \"react\";\nimport FileSaver from 'file-saver';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CLEAR_ALL} from \"../actions/actions\";\n\nexport const Auth = () => {\n    const inputRef = useRef();\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n    const onSave = useCallback(() => {\n        const text = inputRef.current && inputRef.current.value;\n        const file = new File(\n            [JSON.stringify({userName: text, ...state}, null, '\\t')],\n            `hci_exp_with_${text.toLowerCase().replace(/ /g, '_')}.txt`,\n            {type: \"text/plain;charset=utf-8\"}\n            );\n        FileSaver.saveAs(file);\n    }, [inputRef, state]);\n\n    return <div className='auth'>\n        <label>Имя респондента</label>\n        <input ref={inputRef}/>\n        <button onClick={onSave}>Сохранить данные эксперимента</button>\n        <button onClick={() => {dispatch({type: CLEAR_ALL})}}>Очистить данные эксперимента</button>\n    </div>;\n};","import {combineReducers} from 'redux'\nimport {exp1, exp2} from './exp.reducer'\n\nexport const rootReducer = combineReducers({\n    exp1,\n    exp2,\n});","import {ADD_EXP1_INFO, ADD_EXP2_INFO, CLEAR_ALL} from '../actions/actions';\n\nexport const exp1 = (\n    state = [],\n    action,\n) => {\n    console.log( action);\n    switch (action.type) {\n        case ADD_EXP1_INFO: {\n            state.push(action.payload);\n            return state;\n        }\n        case CLEAR_ALL: {\n            return [];\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport const exp2 = (\n    state = [],\n    action,\n) => {\n    switch (action.type) {\n        case ADD_EXP2_INFO: {\n            state.push(action.payload);\n            return state;\n        }\n        case CLEAR_ALL: {\n            return [];\n        }\n        default: {\n            return state;\n        }\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport {App} from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore} from 'redux';\nimport {rootReducer} from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>, document.getElementById('root'));\n","import React from \"react\";\nimport {Header} from './blocks/Header';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport \"./index.css\";\nimport { Route, Switch } from 'react-router-dom';\nimport {Train} from \"./pages/Train\";\nimport {Exp1} from \"./pages/Exp1\";\nimport {Exp2} from \"./pages/Exp2\";\nimport {Auth} from \"./pages/Auth\";\n\nexport const App = () => (\n    <>\n        <Header/>\n        <Switch>\n            <Route exact path='/hci' component={Auth}/>\n            <Route exact path='/hci/exp1' component={Exp1}/>\n            <Route exact path='/hci/exp2' component={Exp2}/>\n            <Route exact path='/hci/train' component={Train}/>\n        </Switch>\n    </>\n);\n"],"sourceRoot":""}